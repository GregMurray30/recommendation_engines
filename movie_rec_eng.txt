from pyspark.storagelevel import StorageLevel
import math

rdd=sc.textFile('/Users/gregmurray/Documents/BigData/ratings3.txt').persist(storageLevel=StorageLevel.MEMORY_AND_DISK)


def li(v): return [v]

def app(a,b):
     a.append(b)
     return a

def ext(a,b):
     a.extend(b)
     return a

rt = rdd.map(lambda x: x.split("::"))
rt = rt.map(lambda x: x[0:3])

#(movie, (user, rating)
rt2 = rt.map(lambda x: (x[1], (x[0], x[2])))
nr = rt2.map(lambda x: (x[0], 1))
numRaters = nr.reduceByKey(lambda x,y: x+y)

#(user, (movie, rating)
rt3 = rt2.map(lambda x: (x[1][0], (x[0], x[1][1])))
rt4 = rt3.join(rt3)
rt5 = rt4.filter(lambda x: int(x[1][0][0])<int(x[1][1][0]))

# ((movieA, movieB), (ratingA, ratingB))    
rt6 = rt5.map(lambda x: ((x[1][0][0],x[1][1][0]),((float(x[1][0][1]), float(x[1][1][1])))))

rt7 = rt6.combineByKey(li, app, ext)

rt8 = rt7.map(lambda x: (x[0][0], (x[0], x[1])))
rt9=rt8.join(numRaters)
rt10 = rt9.map(lambda x: (x[1][0][0][1], x[1])) 
rt11=rt10.join(numRaters)

movie_pairs = rt11.map(lambda x: (x[1][0][0][0], ((x[1][0][1], x[1][1]), x[1][0][0][1]))) .persist(storageLevel=StorageLevel.MEMORY_AND_DISK)


#rdd movie_pairs object schema:
#[(movie_A, movie_B), ((num raters movie_A, num raters movie_B), [(movie_A_rating_1, #movie_B_rating_1), #(movie_A_rating_2, movie_B_rating_2),…, (movie_A_rating_n, #movie_B_rating_n)]))




#Similarity Statistics

# For this demonstration only simscore statitistic will be #calculated. Simscore is the square root of the sum of the #squared #differences between all rating pairs. A score of 0 indicates perfect #similarity. 


def sim(arr):
     d = 0
     for pair in arr:
             d = d+((pair[0]-pair[1])**2)
     d = math.sqrt(d)
     d=round(d,2)
     return d

simscore = movie_pairs.map(lambda x: (x,sim(x[1][1]))).persist(storageLevel=StorageLevel.MEMORY_AND_DISK)

#simscore schema:
#((movie_A, movie_B), ((num raters movie_A, num raters movie_B), [(movie_A_rating_1, #movie_B_rating_1), #(movie_A_rating_2, movie_B_rating_2),…, (movie_A_rating_n, #movie_B_rating_n)]), similarityscore_AB)


def getKey(item): return item[1]

index = simscore.map(lambda x: (x[0][0][0], (x[0][0][1], x[1])))
index2=index.combineByKey(li, app,ext)
movie_rec_index = index2.map(lambda x: (x[0],sorted(x[1],key=getKey))).persist(storageLevel=StorageLevel.MEMORY_AND_DISK)

movie_rec_index.lookup('719')


